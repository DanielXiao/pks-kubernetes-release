name: kubelet
templates:
  bin/drain.erb: bin/drain
  bin/ensure_kubelet_up_and_running.erb: bin/ensure_kubelet_up_and_running
  bin/kubelet_ctl.erb: bin/kubelet_ctl
  bin/pre-start: bin/pre-start
  bin/post-start.erb: bin/post-start
  config/apiserver-ca.pem.erb: config/apiserver-ca.pem
  config/cloud-provider.ini.erb: config/cloud-provider.ini
  config/file-arguments.json.erb: config/file-arguments.json
  config/kubeconfig-drain.erb: config/kubeconfig-drain
  config/kubeconfig.erb: config/kubeconfig
  config/kubelet-client-ca.pem.erb: config/kubelet-client-ca.pem
  config/kubelet-key.pem.erb: config/kubelet-key.pem
  config/kubelet.pem.erb: config/kubelet.pem
  config/kubeletconfig.yml.erb: config/kubeletconfig.yml
  config/openstack-ca.crt.erb: config/openstack-ca.crt
  config/service_key.json.erb: config/service_key.json
  config/static/coredns.ca.erb: config/static/coredns.ca
  config/static/coredns.cert.erb: config/static/coredns.cert
  config/static/coredns.key.erb: config/static/coredns.key
  config/static/coredns.yml.erb: config/static/coredns.yml
  config/static/Corefile.erb: config/static/Corefile
  config/static/metrics-server.ca.erb: config/static/metrics-server.ca
  config/static/metrics-server.cert.erb: config/static/metrics-server.cert
  config/static/metrics-server.key.erb: config/static/metrics-server.key
  config/static/metrics-server.yml.erb: config/static/metrics-server.yml
  config/static/metrics-server-requestheader-client-ca.crt.erb: config/static/metrics-server-requestheader-client-ca.crt

packages:
- pid_utils
- kubernetes
- cni
- socat
- file-generator
properties:
  api-token:
    description: The token to access Kubernetes API
  cloud-provider:
    description: "The type of cloud-provider that is being deployed"
  drain-api-token:
    description: The token to access Kubernetes API used to drain the kubelet.
  http_proxy:
    description: http_proxy env var for cloud provider interactions, i.e. for the
      kubelet
  https_proxy:
    description: https_proxy env var for cloud provider interactions, i.e. for the
      kubelet
  kubelet-configuration:
    description: The Kubelet will load its initial configuration from this.
      Omit this to use the built-in default configuration values.
      Command-line flags override configuration.
  kubectl-drain-timeout:
    description: "The length of time to wait before giving up draining a node, zero means infinite"
    default: "0s"
  kubelet-drain-grace-period:
    description: "Period of time in seconds given to each pod to terminate gracefully. If negative, the default value specified in the pod will be used."
    default: "10"
  kubelet-drain-force:
    description: "Continue drain even if there are pods not managed by a ReplicationController, ReplicaSet, Job, DaemonSet or StatefulSet."
    default: true
  kubelet-drain-ignore-daemonsets:
    description: "Ignore DaemonSet-managed pods during drain"
    default: true
  kubelet-drain-delete-local-data:
    description: "Continue drain even if there are pods using emptyDir (local data that will be deleted when the node is drained)"
    default: true
  kubelet-drain-force-node:
    description: "Forcibly terminate pods if all the pods fail to drain before the timeout."
    default: false
  k8s-args:
    description: "Pass-through options for Kubernetes runtime arguments. See docs https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet/ for reference."
    example: |
      k8s-args:
        address: 10.0.0.1
        docker-only: null
  file-arguments:
    description: "Pass-through options for Kubernetes runtime arguments which accept local file paths as inputs. See docs https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet/ for reference."
    example: |
      file-arguments:
        client-ca-file: base64 encoded config
  no_proxy:
    description: no_proxy env var for cloud provider interactions, i.e. for the kubelet
  tls.coredns:
    description: "Certificate authority, certificate, and private key for CoreDNS"
  tls.kubelet:
    description: Certificate and private key for the Kubernetes worker
    parameters:
      duration: {}
      key_length: {}
    type: {}
  tls.kubelet-client-ca.certificate:
    description: CA certificate of the authority granting access to kubelet server
  tls.kubernetes:
    description: Certificate and private key for the Kubernetes master
  tls.metrics-server:
    description: "Certificate authority, certificate, and private key for Metrics Server"

consumes:
- name: cloud-provider
  optional: true
  type: cloud-provider
# TODO: it doesn't make sense for kubelet to depend on kube-apiserver, should we extract a common config package / job?
- name: kube-apiserver
  type: kube-apiserver
provides:
- name: kubernetes-workers
  type: kubernetes-workers
